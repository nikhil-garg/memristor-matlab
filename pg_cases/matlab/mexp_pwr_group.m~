%simulate power grid case using MEXP method with sources grouping 

clear all;

%add mex & matlab function path
addpath([pwd, '/../../../mex']);
addpath([pwd, '/../../../matlab_sim_func']);
addpath([pwd, '/../../../matlab_sim_func/model_level1']);
addpath([pwd, '/../../../matlab_sim_func/kernels']);
addpath([pwd, '/../../../matlab_sim_func/analysis']);
addpath([pwd, '/../../../matlab_sim_func/utils']);

%create empty simulation parameter structure
[sim_param] = CreateSimStruct;

%simulation setting
sim_param.max_iter = 100;
sim_param.err_tol = 1e-5;
sim_param.rational_max_m = 40;

sim_param.step_size = 1000*10^-12; %1ps
sim_param.gamma = 100*10^-12;
sim_param.end_time = 10*10^-9;
time = 0:sim_param.step_size:sim_param.end_time; %0~1ns

testcase_dir = '../ibm_pg_benchmark/ibmpg1t/';

%load power grid
[sim_param.Gl sim_param.Cl sim_param.pins sim_param.nins sim_param.max_node_num] = load_ibmpdn_case([testcase_dir]);
%[B InputSrcs] = LoadInputFile('inputs.dat', max_node_num);
[Bi sim_param.InputSrcs] = LoadPulseInputFile([testcase_dir, 'Isrc.dat'], sim_param.max_node_num);
[Bv sim_param.VoltageSrcs] = LoadVoltageInputFile([testcase_dir, 'Vsrc.dat'], sim_param.max_node_num);

%load group input sources for transient analysis
[TimeStamps] = GenerateTimeStampsForGroups( sim_param, 0);
[GroupBi GroupInputSrcs] = LoadGroupPulseInputFile([testcase_dir, 'Isrc_config.dat'], [testcase_dir, 'Isrc_group_'],  sim_param.max_node_num);
num_groups = size(GroupBi, 1);

%DC analysis for voltage sources
[dc_input max_step_size] = ComputePulseInputs( sim_param, 0, 0);
elapse = tic;
%[Lg Ug Pg Qg] = lu(Gl);
%dc_voltage = Qg*(Ug\(Lg\(Pg*(Bv*VoltageSrcs))));
dc_voltage = sim_param.Gl\(Bv*sim_param.VoltageSrcs);
runtime_DC = toc(elapse);

display(['runtime of DC analysis is ', num2str(runtime_DC)]);

result = ones(6, length(TimeStamps));
tmpResult = zeros(6, length(TimeStamps));
totaltmpResult = zeros(num_groups, 6, length(TimeStamps));
time = TimeStamps;

observed_node = 3902; % for ibmpg1t
%observed_node = 386534; % for ibmpg3t
%observed_node = 1154987; %for ibmpg4t
%observed_node = 761975; %for ibmpg5t
%observed_node = 971956; %for ibmpg6t

%initial result as dc_voltage for later superposition
for i = 1:5
    result(i,:) = result(i,:) .* dc_voltage(i);
end

result(6,:) = result(6,:) .* dc_voltage(observed_node);
dc_offset(1:5, 1) = dc_voltage(1:5);
dc_offset(6,1) = dc_voltage(observed_node);

alpha = 1;

elapse = tic;
%transient analysis
[L U P Q] = lu((sim_param.Cl/sim_param.gamma + sim_param.Gl));
runtime_LU = toc(elapse);
display(['runtime of LU decomposition is ', num2str(runtime_LU)]);

%this part should be in parallel
for k = 1:num_groups
    
    [input] = ComputeGroupPulseInputs(GroupInputSrcs{k}, 0, 0, sim_param.end_time, TimeStamps);
    CurInput = input;
    current_time = 0;
    time_idx = 1;
    
    step_size = sim_param.step_size;
    end_time = sim_param.end_time;
    
    elapse = tic;    
    %pre_voltage = Qg*(Ug\(Lg\(Pg*(GroupBi{k}*CurInput))));
    pre_voltage = sim_param.Gl\(GroupBi{k}*CurInput);
    total_m = 0;
    while current_time < end_time    
        
        voltage = pre_voltage;
        %read the input for next time step
        PreInput = CurInput;
 
        [input max_step_size time_instants min_step_size] = ComputeGroupPulseInputs(GroupInputSrcs{k}, current_time, step_size, end_time, TimeStamps);
        CurInput = input;
        
        %we need to guarantee the accuracy under min_step_size
        scale = min_step_size/sim_param.gamma;

        
        [W Ij vtmp ep] = ConstructOneMEXP_LU(GroupBi{k}, voltage, sim_param.gamma, alpha, ...
                                             PreInput + (CurInput-PreInput)/max_step_size*sim_param.gamma, PreInput);                                            
        
        [H V beta m expH error] = Adaptive_Rational_Krylov_LU( sim_param, L, U, P, Q, sim_parCl, W, Ij, ...
                                                               ep, sim_param.gamma/alpha, vtmp, scale);
        total_m = total_m + m;
        
        for i = 1:length(time_instants)            
            scale = (time_instants(i) - current_time)/sim_param.gamma;    
            [expH er] = rational_EXP0(H(1:m,1:m), eye(m, 1), scale);
            tmp_f = beta*V(:,1:m)*expH;
            voltage = tmp_f(1:sim_param.max_node_num);
            
            if (isnan(voltage(1)))
                error('causing nan');
            end
            %update previous time step and save the result
            time_idx = time_idx + 1;
            tmpResult(1:5,time_idx) = voltage(1:5);% - dc_offset(1:5);
            tmpResult(6,time_idx) = voltage(observed_node);% - dc_offset(6);
        end
        pre_voltage = voltage;
        current_time = current_time + max_step_size;
        display(['current time is ', num2str(current_time)]);
        %clean memory usage
        %clear Ltmp;
        %clear Utmp;
        %clear Ptmp;
        %clear Qtmp; 
        %clear Ctmp;
        %clear H;
        %clear V;
    end
    result = result + tmpResult;
    totaltmpResult(k,:,:) = tmpResult;
    runtime_each_group = toc(elapse);  
    display(['runtime of group ', num2str(k-1), ' is ', num2str(runtime_each_group)]); 
    display(['total backward/forward substitution:', num2str(total_m)]);
end

