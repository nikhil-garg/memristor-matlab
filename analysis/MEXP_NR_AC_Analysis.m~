% Newton-Raphson AC analysis for MEXP
% Inputs:
%   SimParam: simulation parameter structure
%   ptr_instance: the pointer to the BSIM3 instances in the circuit
%   init_values: the given initial voltaegs or currents at corresponding nodes
%   pre_voltage: the voltaegs or currents values at previous time step
%   Gl:	G matrix of linear components
%   Cl: C matrix of linear components
%   B:	B matrix in state equation
%   input: input current/voltage sources 
%   pre_input: input current voltage sources at previous time step
%   step_size: time step size
%   first_time: first time for AC analysis
%   (optional) err_tol: error tolerance for convergence
% Outputs:
%   result: the dc solution
%   tot_it: total iterations
%   f: induced current & charges of nonlinear devices at time current_time
%       + step_size
%   dfdt: derivative of f at current_time + step_size
%   LTE: local truncation error
function [result tot_it next_f dfdt LTE] = MEXP_NR_AC_Analysis(SimParam, init_values, pre_voltage, pre_pre_voltage, ...
                                                              input, pre_input, step_size, first_time, reiter)
    %perform AC analysis
    tot_it = 1;
    voltage = init_values;

    %calculate the linear terms (see TCAD/ICCAD paper)
    %get nonlineaer C G f in the previous state
    [spm_c spm_g dummy f spm_ec] = BSIM3Eval( SimParam.instance, [0; voltage], step_size, 'tran', first_time, 1);
    first_time = 0; %set first_time as 0 after caling BSIM3Eval

    C = SimParam.Cl + spm_ec; %spm_ec is extrinsic capacitance, intrinsic capacitance can be modeled as current
    
    %TODO
    %check regularization(?)
    %rational way(?)
    
    %F(t) = C^-1*(i_{nonlinear_device} + i_g + i_q)
    %spm_c - spm_ec is intrinsic capacitance
    %calculate F_n
    F = C\(f - spm_g*pre_voltage - (spm_c-spm_ec)*(pre_voltage - pre_pre_voltage)/step_size);

    %semi-implicit formulation from Q. Nie
    v = pre_voltage + step_size/2*F;
    alpha = step_size/10;
    [Ctmp Gtmp v_tmp] = ConstructOneMEXP(C, SimParam.Gl, SimParam.B, v, step_size, alpha, input, pre_input);
       
    %calulate the result of linear part in analytical expm
    T = Ctmp\Gtmp*(step_size/alpha);
    tmp_f = EXP0(T, v_tmp); 
    
    %calculate the result of linear part in Krylov subspace
    %[H V beta m] = krylov(Gtmp, Ctmp, step_size/alpha, v_tmp, 30);
    %expH = EXP0(H(1:m, 1:m), eye(m, 1));
    %err = beta*H(m+1,m)*abs(expH(m,1));  
    %tmp_f = beta*V(:, 1:m)*expH;
    
    L = tmp_f(1:SimParam.max_node_num);
    
    %calculate the result of nonlinear part by NR method
    for it = 2:SimParam.max_iter
        % 0 is initial value for gnd; should always be 0
        [spm_c spm_g dummy f spm_ec] = BSIM3Eval( SimParam.instance, [0; voltage], step_size, 'tran', first_time, it);
        first_time = 0; %set first_time as 0 after caling BSIM3Eval
        
        %formulation 1
        %x = L + C\(step_size/2*f);
        
        %formulation 2
        %x = L + EXP1(-(Cnl\Gnl)*step_size, Cnl\(f*step_size/2));
        
        %formulation 3
        %x = L + EXP1(-(Cnl\(Gl+rG))*step_size, (Cnl)\((f - spm_g * voltage)*step_size)/2);
        
        %formulation 4
        %calculate C*F_{n+1}
        F = (f - spm_g*voltage - (spm_c-spm_ec)*(voltage-pre_voltage)/step_size);

        %x = L + C\(step_size/2*tt);               
        
        rhs = (C*voltage - step_size/2*F - C*L);
        %T is Jacobian matrix for MEXP
        T = (C - step_size/2*(-spm_g-(spm_c-spm_ec)/step_size));        
        dx = -T\rhs;
        x = voltage + dx;
        
        if (norm(dx, 1) < SimParam.iter_err_tol)
            voltage = x;
            next_f = C\F;
            break;
        end
        
        %update voltage with new solution x
        voltage = x;
    end
    
    tot_it  = it;
    if (tot_it == it)
        next_f = 0;
    end

    result = voltage;
    
    %calculate LTE
    %using LTE from work of Q. Nie
    %fn is B*u + F
    pre_pre_f = SimParam.pre_f;
    pre_f = SimParam.f;
    if (norm(pre_pre_f, 2) == 0)
        pre_pre_f = next_f;
    end
    if (norm(pre_f, 2) == 0)
        pre_f = next_f;
    end
    fn = C\SimParam.B*pre_input + pre_f;
    dfndt = C\(SimParam.B*(input-pre_input)/step_size) + (pre_f - pre_pre_f)/step_size;
    dfdt = (pre_f - pre_pre_f)/step_size; 
    pre_dfdt = SimParam.pre_dfdt;
    if (norm(pre_dfdt, 2) == 0)
        pre_dfdt = dfdt;
    end
    LTE = -step_size^3/12*(C\(SimParam.Gl*step_size*(C\(SimParam.Gl*step_size*fn))) ...
            + 2*C\(SimParam.Gl*step_size*dfndt) + (dfdt - pre_dfdt)/step_size);
end
